// Title: Implement Trie (Prefix Tree)
            // Difficulty: Medium
            // Language: Python3
            // Link: https://leetcode.com/problems/implement-trie-(prefix-tree)/

class TrieNode:

    def __init__(self):
        self.children = {}
        self.end = False

class Trie:

    def __init__(self):
        self.root = TrieNode()

    def insert(self, word: str) -> None:
        for c in word:
        curr.end = True

    def search(self, word: str) -> bool:

    def startsWith(self, prefix: str) -> bool:
        return True

# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
            if c not in curr.children:
        curr = self.root
                curr.children[c] = TrieNode()
            curr = curr.children[c]
        curr = self.root
        for c in word:
            if c not in curr.children:
                return False
            curr = curr.children[c]
        return curr.end
        curr = self.root
        for c in prefix:
            if c not in curr.children:
                return False
            curr = curr.children[c]
# param_3 = obj.startsWith(prefix)