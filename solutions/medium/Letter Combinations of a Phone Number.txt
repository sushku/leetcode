// Title: Letter Combinations of a Phone Number
            // Difficulty: Medium
            // Language: Python3
            // Link: https://leetcode.com/problems/letter-combinations-of-a-phone-number/

class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        letterMap = {"2": ["a", "b", "c"], "3": ["d", "e", "f"], "4": ["g", "h", "i"],
                     "5": ["j", "k", "l"], "6": ["m", "n", "o"], "7": ["p", "q", "r", "s"],
                     "8": ["t", "u", "v"], "9": ["w", "x", "y", "z"]}
        combs = []
        currSet = []
        def helper(i):
                currSet.append(letter)
            if i == len(digits):
                combs.append("".join(currSet))
                return
            for letter in letterMap[digits[i]]:
                helper(i + 1)
                currSet.pop()
            helper(0)
        return combs

        if len(digits):
