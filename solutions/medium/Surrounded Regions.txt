// Title: Surrounded Regions
            // Difficulty: Medium
            // Language: Python3
            // Link: https://leetcode.com/problems/surrounded-regions/

class Solution:
    def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        rows, cols = len(board), len(board[0])
        for r in range(rows):
            for c in range(cols):
                if r > 0 and r < rows - 1 and c > 0 and c < cols - 1:
                    continue
                if board[r][c] == "X":
                    continue
        neighbors = [(1,0), (0,1), (-1,0), (0,-1)]
                        r2, c2 = r1 + n[0], c1 + n[1]
                        if 0 <= r2 < rows and 0 <= c2 < cols and board[r2][c2] == "O":
                            board[r2][c2] = "E"
        dq = deque()
                board[r][c] = "E"
                dq.append((r, c))
                    r1, c1 = dq.pop()
                    for n in neighbors:
                            dq.append((r2, c2))
                            track.add((r2, c2))
                track.add((r, c))
        track = set()
                while dq:
        for cell in track:
            board[cell[0]][cell[1]] = "O"
        # Time: O(M * N)
        # Space: O(1)
        for r in range(rows):
            for c in range(cols):
                if board[r][c] == "O":
                    board[r][c] = "X"
        return