// Title: Binary Tree Level Order Traversal
            // Difficulty: Medium
            // Language: Python3
            // Link: https://leetcode.com/problems/binary-tree-level-order-traversal/

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        if not root:
            return []
        queue = deque()
        while True:
        vals, levelVals = [], []
                queue.append((level+1, node.left))
            if node.left:
            if node.right:
        prevLevel, level = 0, 0
        queue.append((0, root))
            level, node = queue.popleft()
                levelVals.append(vals)
            vals.append(node.val)
                queue.append((level+1, node.right))
                vals = []
                prevLevel = level
            if prevLevel != level:
            if not queue:
                break
                levelVals.append(vals)
        return levelVals