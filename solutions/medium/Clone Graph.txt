// Title: Clone Graph
            // Difficulty: Medium
            // Language: Python3
            // Link: https://leetcode.com/problems/clone-graph/

"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None 
else []
"""

from typing import Optional
class Solution:
    def cloneGraph(self, node: Optional['Node']) -> Optional
['Node']:
        if not node:
            return None
        q.append(node)
        nodeMap = {}
        while q:
        for node in nodeMap:
        q = deque()
            node = q.popleft()
            for n in node.neighbors:
                    q.append(n)
                nodeMap[node] = Node(node.val)
            if node not in nodeMap:
        origRoot = node
            newNode = nodeMap[node]
            for n in node.neighbors:
                newNode.neighbors.append(nodeMap[n])
                if n not in nodeMap:
        return nodeMap[origRoot]