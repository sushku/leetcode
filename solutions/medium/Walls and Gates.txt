// Title: Walls and Gates
            // Difficulty: Medium
            // Language: Python3
            // Link: https://leetcode.com/problems/walls-and-gates/

class Solution:
    def wallsAndGates(self, rooms: List[List[int]]) -> None:
        """
        Do not return anything, modify rooms in-place instead.
        """
        if not rooms:
            return
        rows, cols = len(rooms), len(rooms[0])
        q = deque()    
        neighbors = [(1,0), (0,1), (-1,0), (0,-1)]
        for r in range(rows):
            for c in range(cols):
                if rooms[r][c] != 0:
                    continue
                level = 0
                q.append((r, c, level))
                while q:
                    r1, c1, level = q.popleft()
                    for n in neighbors:
                        r2, c2 = r1 + n[0], c1 + n[1]
                            q.append((r2, c2, level + 1))
                        if 0 <= r2 < rows and 0 <= c2 < cols and (r2, c2) not in visited and rooms[r2][c2] not in 
                            if rooms[r2][c2] > level + 1:
                                rooms[r2][c2] = level + 1
                visited = set([(r, c)])
                            visited.add((r2, c2))
[0, -1]:
