// Title: N-Queens
            // Difficulty: Hard
            // Language: Python3
            // Link: https://leetcode.com/problems/n-queens/

class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        res = []

        def backtrack(r, cols, diags, cDiags, state):
                if c in cols or (r - c) in diags or (r + c) in cDiags:
                    continue
                if r == n - 1:
                state[r][c] = "."
                backtrack(r + 1, cols, diags, cDiags, state)
                    res.append(["".join(row) for row in state])
                cols.add(c)

        backtrack(0, cols, diags, cDiags, board)
        return res
                diags.add(r-c)
                cDiags.add(r+c)
                cols.remove(c)
        cols, diags, cDiags = set(), set(), set()
                diags.remove(r-c)
                cDiags.remove(r+c)
            for c in range(n):
                state[r][c] = "Q"
                    return
        board = [["."] * n for i in range(n)]
                    state[r][c] = "."