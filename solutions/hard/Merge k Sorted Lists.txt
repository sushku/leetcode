// Title: Merge k Sorted Lists
            // Difficulty: Hard
            // Language: Python3
            // Link: https://leetcode.com/problems/merge-k-sorted-lists/

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class HeapNode:
    def __init__(self, node):
        self.node = node

    def __lt__(self, other):
        return self.node.val < other.node.val

class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        heap = []
        for node in lists:
            if node:
                heapq.heappush(heap, HeapNode(node))
        root = ListNode(0)
        curr = root
        while heap:
            heap_node = heapq.heappop(heap)
            node = heap_node.node
            curr.next = node
            curr = node
            if node.next:
                heapq.heappush(heap, HeapNode(node.next))
        # Time: O(N log k)
        # Space: O(k)
        return root.next