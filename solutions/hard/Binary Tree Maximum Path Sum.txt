// Title: Binary Tree Maximum Path Sum
            // Difficulty: Hard
            // Language: Python3
            // Link: https://leetcode.com/problems/binary-tree-maximum-path-sum/

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxPathSum(self, root: Optional[TreeNode]) -> int:
        maxSum = float('-inf')
        def dfs(node):
            leftSum = dfs(node.left)
            rightSum = dfs(node.right)
            if not node:
                return 0
            return node.val + max(0, leftSum, rightSum)
            maxSum = max(maxSum, subTreeSum)
        rootPathSum = dfs(root)
            nonlocal maxSum
            subTreeSum = node.val + (max(0, leftSum, rightSum, leftSum + rightSum))
        return max(maxSum, rootPathSum)