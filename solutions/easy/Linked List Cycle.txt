// Title: Linked List Cycle
            // Difficulty: Easy
            // Language: Python3
            // Link: https://leetcode.com/problems/linked-list-cycle/

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        if not head:
            return False
        slow, fast = head, head.next
        while True:
            if slow == fast:
                return True
            if fast and fast.next:
                fast = fast.next.next
                slow = slow.next
            else:
                return False
        return False